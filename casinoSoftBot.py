import json
import time
import logging
from pathlib import Path
from telegram import (
    Update, InlineKeyboardButton,
    InlineKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = "8385917871:AAETCv5iNDhLRle2RusknPd4ebnc_KpTfzE"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π
REG_LINK = "https://1whecs.life/v3/lucky-jet-updated?p=yahu"
CHANNEL_LINK = "https://t.me/AIJetAnalyzer_bot"
DB_PATH = Path(__file__).parent / "users_db.json"
WAIT_ID = 1
# =======================

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π
if not DB_PATH.exists():
    DB_PATH.write_text("{}", encoding="utf-8")

def load_db():
    try:
        return json.loads(DB_PATH.read_text(encoding="utf-8"))
    except Exception:
        return {}

def save_db(db):
    try:
        DB_PATH.write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–∑—ã: {e}")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ\n\n"
        "‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –ø–æ –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ.\n"
        "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–æ—Ñ—Ç –¥–ª—è –∞–±—É–∑–∞ –∫–∞–∑–∏–Ω–æ!\n\n"
    )
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=REG_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="registered")]
    ])
    await update.message.reply_text(text, reply_markup=kb)

# –ù–∞–∂–∞–ª ¬´–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è¬ª
async def registered_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π ID, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è —É —Ç–µ–±—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return WAIT_ID

# –ü—Ä–∏—ë–º ID
async def receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    entered_id = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –¥–ª–∏–Ω–∞ –æ—Ç 7 –¥–æ 10
    if not (7 <= len(entered_id) <= 10 and entered_id.isdigit()):
        await update.message.reply_text("‚ùå ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return WAIT_ID

    db = load_db()
    db[str(user.id)] = {
        "tg_username": user.username,
        "first_name": user.first_name,
        "partner_id": entered_id,
        "ts": int(time.time())
    }
    save_db(db)

    await update.message.reply_text(
        "‚úÖ ID –ø–æ–ª—É—á–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        f"–°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª —Å —Å–æ—Ñ—Ç–æ–º:\n{CHANNEL_LINK}"
    )
    return ConversationHandler.END

# /check ‚Äî –µ—Å–ª–∏ —é–∑–µ—Ä –ø–æ—Ç–µ—Ä—è–ª —Å—Å—ã–ª–∫—É
async def check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if str(update.effective_user.id) in db:
        await update.message.reply_text(f"–í–∞—à –¥–æ—Å—Ç—É–ø: {CHANNEL_LINK}")
    else:
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=REG_LINK)],
            [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="registered")]
        ])
        await update.message.reply_text(
            "–í—ã –µ—â—ë –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ ID. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞.",
            reply_markup=kb
        )

# /cancel ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫–µ–π, –æ—Ç–º–µ–Ω–∞. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CallbackQueryHandler(registered_pressed, pattern="^registered$"),
        ],
        states={
            WAIT_ID: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_id)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("check", check))

    logger.info("Bot is running...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
