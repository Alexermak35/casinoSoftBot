import json
import time
import random
import logging
from pathlib import Path
from telegram import (
    Update, InlineKeyboardButton,
    InlineKeyboardMarkup, ReplyKeyboardRemove, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

# ====== CONFIG ======
TOKEN = "8486417293:AAHtCmgZ33kqDf3Pr1RCxgyqlnUKMKa5rMk"
REG_LINK = "https://1whecs.life/v3/lucky-jet-updated?p=yahu"
CHANNEL_LINK = "https://t.me/AIJetAnalyzer_bot"
DB_PATH = Path(__file__).parent / "users_db.json"

WAIT_ID, WAIT_AMOUNT = range(2)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

if not DB_PATH.exists():
    DB_PATH.write_text("{}", encoding="utf-8")

# ====== DB ======
def load_db():
    try:
        return json.loads(DB_PATH.read_text(encoding="utf-8"))
    except Exception:
        return {}

def save_db(db):
    try:
        DB_PATH.write_text(json.dumps(db, ensure_ascii=False, indent=2), encoding="utf-8")
    except Exception as e:
        logger.error(f"DB save error: {e}")

# ---- START ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db = load_db()

    if str(user.id) not in db:
        text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöÄ\n\n"
            "‚ö†Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –ø–æ –Ω–∞—à–µ–π –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ.\n"
            "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø!\n\n"
        )
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url=REG_LINK)],
            [InlineKeyboardButton("‚úÖ –Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="registered")]
        ])
        await update.message.reply_text(text, reply_markup=kb)
        # üëá Keep the conversation open ‚Äî wait for button press
        return WAIT_ID
    else:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ.")
        return ConversationHandler.END


# ---- REGISTERED BUTTON ----
async def registered_pressed(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–π ID, "
        "–∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏–ª—Å—è —É —Ç–µ–±—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return WAIT_ID


# ---- RECEIVE ID ----
async def receive_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    entered_id = (update.message.text or "").strip()

    if not (7 <= len(entered_id) <= 10 and entered_id.isdigit()):
        await update.message.reply_text("‚ùå ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return WAIT_ID

    db = load_db()
    db[str(user.id)] = {
        "tg_username": user.username,
        "first_name": user.first_name,
        "partner_id": entered_id,
        "currency": "UAH",
        "signals": [],
        "ts": int(time.time())
    }
    save_db(db)

    await update.message.reply_text(
        "‚úÖ ID –ø–æ–ª—É—á–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã: /signal, /history, /profile, /instruction"
    )
    return ConversationHandler.END

# ====== SIGNAL SYSTEM ======
async def signal_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if str(update.effective_user.id) not in db:
        await update.message.reply_text("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

    keyboard = [
        [InlineKeyboardButton("üéØ 10‚Ç¥", callback_data="amt:10"),
         InlineKeyboardButton("üéØ 50‚Ç¥", callback_data="amt:50")],
        [InlineKeyboardButton("üéØ 100‚Ç¥", callback_data="amt:100"),
         InlineKeyboardButton("‚úç –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data="amt:custom")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))


async def amount_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if str(update.effective_user.id) not in db:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

    q = update.callback_query
    await q.answer()

    if q.data == "amt:custom":
        await q.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:")
        return WAIT_AMOUNT

    amount = int(q.data.split(":")[1])
    await send_signal(update, context, amount)
    return ConversationHandler.END


async def amount_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    if str(update.effective_user.id) not in db:
        await update.message.reply_text("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END

    text = (update.message.text or "").strip()
    if not text.isdigit():
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return WAIT_AMOUNT

    amount = int(text)
    await send_signal(update, context, amount)
    return ConversationHandler.END


async def send_signal(update: Update, context: ContextTypes.DEFAULT_TYPE, amount: int):
    user = update.effective_user
    db = load_db()
    user_data = db.get(str(user.id))

    if not user_data:
        # fallback protection
        if update.callback_query:
            await update.callback_query.message.reply_text("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        else:
            await update.message.reply_text("‚õî –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return

    rnd = random.random()
    if rnd < 0.75:
        coef = round(random.uniform(1.2, 2.9), 2)
    elif rnd < 0.95:
        coef = round(random.uniform(3.0, 4.5), 2)
    else:
        coef = round(random.uniform(4.6, 7.0), 2)

    signal = f"üé≤ –°—Ç–∞–≤–∫–∞: {amount}‚Ç¥ | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coef}x"
    user_data["signals"].append(signal)
    user_data["signals"] = user_data["signals"][-10:]
    save_db(db)

    keyboard = [[InlineKeyboardButton("‚úç –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change_amount")]]
    if update.callback_query:
        await update.callback_query.message.reply_text(signal, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(signal, reply_markup=InlineKeyboardMarkup(keyboard))


async def change_amount_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    await q.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –≤ –≥—Ä–∏–≤–Ω–∞—Ö:")
    return WAIT_AMOUNT


# ====== OTHER COMMANDS ======
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    signals = db.get(str(update.effective_user.id), {}).get("signals", [])
    if not signals:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    else:
        await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è:\n" + "\n".join(signals))

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = load_db()
    u = db.get(str(update.effective_user.id))
    if not u:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ /start")
        return
    msg = f"üë§ –¢–≤–æ–π ID: {u['partner_id']}\nüí± –í–∞–ª—é—Ç–∞: –≥—Ä–∏–≤–Ω—ã (‚Ç¥)"
    await update.message.reply_text(msg)

async def instruction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
        "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å—Å—ã–ª–∫—É.\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏ —Å–≤–æ–π ID.\n"
        "3Ô∏è‚É£ –í—Å–µ —Å—Ç–∞–≤–∫–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –≥—Ä–∏–≤–Ω–∞—Ö (‚Ç¥).\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/signal ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª\n"
        "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è\n"
        "/profile ‚Äî –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/instruction ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"

    )
    await update.message.reply_text(msg)


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Works both for messages and callback queries
    if update.message:
        await update.message.reply_text(
            "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
    elif update.callback_query:
        q = update.callback_query
        await q.answer()
        await q.message.reply_text(
            "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
    return ConversationHandler.END

# ====== MAIN ======
async def post_init(app: Application):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("signal", "–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª"),
        BotCommand("history", "–ò—Å—Ç–æ—Ä–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"),
        BotCommand("profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand("instruction", "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞"),
    ])

def main():
    app = Application.builder().token(TOKEN).post_init(post_init).build()


    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            WAIT_ID: [
                CallbackQueryHandler(registered_pressed, pattern="^registered$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_id),
            ],
            WAIT_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, amount_text)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    app.add_handler(conv)

    app.add_handler(CommandHandler("signal", signal_cmd))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("instruction", instruction))


    app.add_handler(CallbackQueryHandler(amount_button, pattern=r"^amt:"))
    app.add_handler(CallbackQueryHandler(change_amount_callback, pattern=r"^change_amount$"))

    logger.info("Bot is running...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
